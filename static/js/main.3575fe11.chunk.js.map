{"version":3,"sources":["components/card/card.jsx","components/cardlist/cardlist.jsx","components/searchbox/searchbox.jsx","App.js","reportWebVitals.js","index.js"],"names":["card","props","className","alt","src","monster","id","name","email","cardlist","monsters","map","searchbox","placeholder","searchChange","type","onChange","App","onsearchChange","e","setState","search","target","value","state","fetch","then","Response","json","users","this","filtredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAaeA,EAVF,SAAEC,GACb,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,YCSTC,EAZE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GACjB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCMrBM,G,MAbG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OAEI,uBACMZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCFDG,E,kDAEnB,aAAc,IAAD,8BACX,gBAYFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,OAAOF,EAAEG,OAAOC,SAZ/B,EAAKC,MAAM,CACTd,SAAS,GACTW,OAAO,IAJE,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACV,SAASmB,S,oBAMvC,WAAU,IAAD,EACoBC,KAAKN,MAAxBd,EADD,EACCA,SAASW,EADV,EACUA,OACXU,EAAiBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAOY,kBAG7C,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACMW,YAAY,kBACZC,aAAcgB,KAAKZ,iBAEzB,cAAC,EAAD,CAAUR,SAAUqB,W,GAhCKI,aCIlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3575fe11.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css'\n\nconst card = ( props) => {\n  return (\n    <div className=\"card-container\">\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} />\n      <h2>{ props.monster.name }</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n\nexport default card;","\nimport React from 'react';\nimport './cardlist.css';\nimport Card from '../card/card';\n\nconst cardlist = (props) => {\n  return (\n    <div className=\"card-list\">\n      {\n        props.monsters.map(monster=>{\n          return <Card key={monster.id} monster={monster} />\n        })\n        } \n    </div>\n  );\n};\n\nexport default cardlist;\n","import React from 'react';\nimport './searchbox.css';\n\nconst searchbox = ({placeholder, searchChange}) => {\n  return (\n    \n      <input \n            className=\"search\"\n            type=\"search\" \n            placeholder={placeholder}\n            onChange={searchChange}\n        />\n    \n  );\n};\n\nexport default searchbox;","\nimport React, { Component } from 'react'\nimport './App.css';\nimport Cardlist from './components/cardlist/cardlist';\nimport Searchbox from './components/searchbox/searchbox';\n\n\n\nexport default class App extends Component {\n  \n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      search:\"\"\n    }\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(Response=> Response.json())\n    .then(users=>this.setState({monsters:users}))\n}\n  onsearchChange=(e)=>{\n    this.setState({search:e.target.value})\n  }\n \n  render() {\n    const { monsters,search }= this.state;\n    const filtredMonsters= monsters.filter(monster=>\n      monster.name.toLowerCase().includes(search.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Searchbox \n              placeholder=\"search monsters\"\n              searchChange={this.onsearchChange}\n        />\n        <Cardlist monsters={filtredMonsters} />\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}